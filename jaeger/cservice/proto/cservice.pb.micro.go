// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/cservice.proto

package cservice

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Cservice service

func NewCserviceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Cservice service

type CserviceService interface {
	CMethod(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*emptypb.Empty, error)
}

type cserviceService struct {
	c    client.Client
	name string
}

func NewCserviceService(name string, c client.Client) CserviceService {
	return &cserviceService{
		c:    c,
		name: name,
	}
}

func (c *cserviceService) CMethod(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "Cservice.CMethod", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Cservice service

type CserviceHandler interface {
	CMethod(context.Context, *emptypb.Empty, *emptypb.Empty) error
}

func RegisterCserviceHandler(s server.Server, hdlr CserviceHandler, opts ...server.HandlerOption) error {
	type cservice interface {
		CMethod(ctx context.Context, in *emptypb.Empty, out *emptypb.Empty) error
	}
	type Cservice struct {
		cservice
	}
	h := &cserviceHandler{hdlr}
	return s.Handle(s.NewHandler(&Cservice{h}, opts...))
}

type cserviceHandler struct {
	CserviceHandler
}

func (h *cserviceHandler) CMethod(ctx context.Context, in *emptypb.Empty, out *emptypb.Empty) error {
	return h.CserviceHandler.CMethod(ctx, in, out)
}

// Api Endpoints for Bservice service

func NewBserviceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Bservice service

type BserviceService interface {
	BMethod(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*emptypb.Empty, error)
}

type bserviceService struct {
	c    client.Client
	name string
}

func NewBserviceService(name string, c client.Client) BserviceService {
	return &bserviceService{
		c:    c,
		name: name,
	}
}

func (c *bserviceService) BMethod(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "Bservice.BMethod", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Bservice service

type BserviceHandler interface {
	BMethod(context.Context, *emptypb.Empty, *emptypb.Empty) error
}

func RegisterBserviceHandler(s server.Server, hdlr BserviceHandler, opts ...server.HandlerOption) error {
	type bservice interface {
		BMethod(ctx context.Context, in *emptypb.Empty, out *emptypb.Empty) error
	}
	type Bservice struct {
		bservice
	}
	h := &bserviceHandler{hdlr}
	return s.Handle(s.NewHandler(&Bservice{h}, opts...))
}

type bserviceHandler struct {
	BserviceHandler
}

func (h *bserviceHandler) BMethod(ctx context.Context, in *emptypb.Empty, out *emptypb.Empty) error {
	return h.BserviceHandler.BMethod(ctx, in, out)
}
